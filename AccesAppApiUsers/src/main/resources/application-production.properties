myapplication.env=production profile
server.port=${PORT:0}
spring.application.name=users-ws
eureka.client.service-url.defaultZone=http://test:test@localhost:8010/eureka
spring.devtools.restart.enabled=true
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
#spring.h2.console.enabled=true
#spring.h2.console.settings.web-allow-others=true
#spring.datasource.url=jdbc:postgresql://localhost:5432/users
#spring.datasource.username=postgres
#spring.datasource.password=postgres
#spring.jpa.database=postgresql
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.url=jdbc:mysql://localhost:3306/users?serverTimezone=UTC
spring.datasource.username=mysql
spring.datasource.password=mysql
spring.jpa.database=mysql
spring.jpa.show-sql=true
spring.sql.init.mode=always
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create
#spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.main.allow-circular-references=true
token.expiration_time=120000000
token.secret=putinzsdlknfnlsdhnvlkjdnawjhdoAPSOopdjpasdjlksdnvlkcvndjklANLAJSOIWEURT98EYT987YFPW3EUIJDSLFIHSDLIUVH
login.url.path=/login-ws
spring.config.import=optional:configserver:http://localhost:8012
spring.cloud.config.name=users-ws
#spring.config.import=configserver:http://localhost:8888
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5673
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
management.endpoints.web.exposure.include=*
logging.level.com.accountant.accesappapiusers.data.AlbumsServiceClient=DEBUG
management.endpoints.enabled-by-default=true
management.health.circuitbreakers.enabled=true
resilience4j.circuitbreaker.circuit-breaker-aspect-order=1
resilience4j.circuitbreaker.instances.albums-ws.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.albums-ws.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.albums-ws.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-size=2
resilience4j.circuitbreaker.instances.albums-ws.minimum-number-of-calls=1
resilience4j.circuitbreaker.instances.albums-ws.event-consumer-buffer-size=10
resilience4j.retry.retry-aspect-order=2
resilience4j.retry.instances.albums-ws.max-attempts=3
resilience4j.retry.instances.albums-ws.wait-duration=2s
resilience4j.retry.instances.albums-ws.enable-exponential-backoff=true
resilience4j.retry.instances.albums-ws.exponential-backoff-multiplier=5
management.endpoint.health.show-details=always
management.tracing.sampling.probability=1.0
# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true
# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
logging.file.name=users-ws.log
#management.metrics.distribution.percentiles-histogram.resilience4j.circuitbreaker.calls=true
#management.metrics.distribution.percentiles-histogram.http.server.requests=true